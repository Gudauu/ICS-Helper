/*
 * generated by Xtext 2.34.0
 */
package ics.helper.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ics.helper.helperDSL.CreateCommand
import ics.helper.helperDSL.RecurRule
import java.text.SimpleDateFormat
import java.util.Date

class HelperDSLGenerator extends AbstractGenerator {

    val SimpleDateFormat icsDateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss")

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (e : resource.allContents.toIterable.filter(CreateCommand)) {
            generateICSFile(e, fsa)
        }
    }

    def generateICSFile(CreateCommand command, IFileSystemAccess2 fsa) {
        val StringBuilder icsContent = new StringBuilder()
        icsContent.append("BEGIN:VCALENDAR\n")
        icsContent.append("VERSION:2.0\n")
        icsContent.append("PRODID:-//hacksw/handcal//NONSGML v1.0//EN\n")
        
        for (event : command.events) {
            icsContent.append("BEGIN:VEVENT\n")
            icsContent.append("SUMMARY:" + event.name + "\n")
            icsContent.append("DTSTART:" + convertToICSTimeFormat(event.startTime) + "\n")
            icsContent.append("DTEND:" + convertToICSTimeFormat(event.endTime) + "\n")
            if (event.location !== null) {
                icsContent.append("LOCATION:" + event.location + "\n")
            }
            if (event.description !== null) {
                icsContent.append("DESCRIPTION:" + event.description.replaceAll("\\n", "\\\\n") + "\n") // Handle newlines correctly
            }
            if (event.link !== null) {
                icsContent.append("URL:" + event.link + "\n") // Correct property name is URL
            }
            if (event. !== null) {
                icsContent.append("URL:" + event.link + "\n") // Correct property name is URL
            }
            icsContent.append("END:VEVENT\n")
        }
        
        icsContent.append("END:VCALENDAR")
        
        val fileName = "ics-gen/" + command.name + ".ics"
        fsa.generateFile(fileName, icsContent.toString)
    }

    def String convertToICSTimeFormat(String userInputTime) {
        // Assume this method is implemented as described earlier
    }

    def String generateRecurRule(RecurRule recur) {
        switch recur {
            case Daily: "RRULE:FREQ=DAILY"
            case Weekly: "RRULE:FREQ=WEEKLY"
            case Monthly: "RRULE:FREQ=MONTHLY"
            case Yearly: "RRULE:FREQ=YEARLY"
            case OnDaysOfWeek: {
                val days = recur.daysOfWeek.day.join(",")
                "RRULE:FREQ=WEEKLY;BYDAY=" + days.toUpperCase
            }
            default: ""
        }
    }
}

