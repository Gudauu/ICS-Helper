/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.icshelper.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.icshelper.icsHelper.CreateCommand;
import org.xtext.example.icshelper.icsHelper.Event;
import org.xtext.example.icshelper.icsHelper.IcsHelperPackage;
import org.xtext.example.icshelper.icsHelper.MergeCommand;
import org.xtext.example.icshelper.icsHelper.Model;
import org.xtext.example.icshelper.icsHelper.ModifyCommand;
import org.xtext.example.icshelper.icsHelper.SplitCommand;
import org.xtext.example.icshelper.services.IcsHelperGrammarAccess;

@SuppressWarnings("all")
public class IcsHelperSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IcsHelperGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IcsHelperPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IcsHelperPackage.CREATE_COMMAND:
				sequence_CreateCommand(context, (CreateCommand) semanticObject); 
				return; 
			case IcsHelperPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case IcsHelperPackage.MERGE_COMMAND:
				sequence_MergeCommand(context, (MergeCommand) semanticObject); 
				return; 
			case IcsHelperPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case IcsHelperPackage.MODIFY_COMMAND:
				sequence_ModifyCommand(context, (ModifyCommand) semanticObject); 
				return; 
			case IcsHelperPackage.SPLIT_COMMAND:
				sequence_SplitCommand(context, (SplitCommand) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns CreateCommand
	 *     CreateCommand returns CreateCommand
	 *
	 * Constraint:
	 *     (name=ID events+=Event*)
	 * </pre>
	 */
	protected void sequence_CreateCommand(ISerializationContext context, CreateCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID startTime=STRING endTime=STRING location=STRING?)
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns MergeCommand
	 *     MergeCommand returns MergeCommand
	 *
	 * Constraint:
	 *     (schedules+=ID+ target=ID)
	 * </pre>
	 */
	protected void sequence_MergeCommand(ISerializationContext context, MergeCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns ModifyCommand
	 *     ModifyCommand returns ModifyCommand
	 *
	 * Constraint:
	 *     ((schedule=ID | event=[Event|ID]) ((time='time' value=STRING) | value=STRING | value=STRING))
	 * </pre>
	 */
	protected void sequence_ModifyCommand(ISerializationContext context, ModifyCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns SplitCommand
	 *     SplitCommand returns SplitCommand
	 *
	 * Constraint:
	 *     (schedule=ID criteria=STRING)
	 * </pre>
	 */
	protected void sequence_SplitCommand(ISerializationContext context, SplitCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IcsHelperPackage.Literals.SPLIT_COMMAND__SCHEDULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IcsHelperPackage.Literals.SPLIT_COMMAND__SCHEDULE));
			if (transientValues.isValueTransient(semanticObject, IcsHelperPackage.Literals.SPLIT_COMMAND__CRITERIA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IcsHelperPackage.Literals.SPLIT_COMMAND__CRITERIA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSplitCommandAccess().getScheduleIDTerminalRuleCall_1_0(), semanticObject.getSchedule());
		feeder.accept(grammarAccess.getSplitCommandAccess().getCriteriaSTRINGTerminalRuleCall_3_0(), semanticObject.getCriteria());
		feeder.finish();
	}
	
	
}
